type: edu
files:
  - name: src/tasklist/Main.kt
    visible: true
    text: |+
      package tasklist
      
      fun main() {
          // write your code here
      }
    
    
    learner_created: false
  - name: test/TasklistTest.kt
    visible: false
    text: |+
      import com.google.gson.JsonElement
      import kotlinx.datetime.*
      import org.hyperskill.hstest.common.JsonUtils
      import org.hyperskill.hstest.common.JsonUtils.getJson
      import org.hyperskill.hstest.dynamic.DynamicTest
      import org.hyperskill.hstest.stage.StageTest
      import org.hyperskill.hstest.testcase.CheckResult
      import org.hyperskill.hstest.testing.TestedProgram
      import org.hyperskill.hstest.testing.expect.Expectation.expect
      import org.hyperskill.hstest.testing.expect.json.JsonChecker.*
      import java.io.File
      
      class TasklistTest : StageTest<Any>() {
          // Wrong task input
          @DynamicTest(order = 1)
          fun tasklistTest28(): CheckResult {
              try {
                  val jsonFile = File("tasklist.json")
                  if (jsonFile.exists()) jsonFile.delete()
              } catch (e: Exception) {
                  return CheckResult(false, "An exception was thrown, while trying to delete a JSON file.")
              }
      
              val inputStrings = listOf("input", "task", "",  "123", " ")
              val co = CheckOutput()
              if ( !co.start("Input an action (add, print, edit, delete, end):") )
                  return CheckResult(false, "Your output should contain \"Input an action (add, print, edit, delete, end):\"")
              for (s in inputStrings) {
                  if (!co.input(s, "The input action is invalid"))
                      return CheckResult(false, "Your output should contain \"The input action is invalid\"")
                  if (!co.inputNext("Input an action (add, print, edit, delete, end):"))
                      return CheckResult(false, "Your output should contain \"Input an action (add, print, edit, delete, end):\"")
              }
      
              if (!co.input("end", "Tasklist exiting!"))
                  return CheckResult(false, "Your output should contain \"Tasklist exiting!\"")
      
              if (!co.programIsFinished() )
                  return CheckResult(false, "The application didn't exit.")
              return CheckResult.correct()
          }
      
          // Wrong priority is input
          @DynamicTest(order = 2)
          fun tasklistTest29(): CheckResult {
              try {
                  val jsonFile = File("tasklist.json")
                  if (jsonFile.exists()) jsonFile.delete()
              } catch (e: Exception) {
                  return CheckResult(false, "An exception was thrown, while trying to delete a JSON file.")
              }
      
              val inputStrings = listOf("normal", "Critical", "low",  "high", " ")
              val co = CheckOutput()
              if ( !co.start("Input an action (add, print, edit, delete, end):") )
                  return CheckResult(false, "Your output should contain \"Input an action (add, print, edit, delete, end):\"")
      
              if (!co.input("add", "Input the task priority (C, H, N, L):"))
                  return CheckResult(false, "Your output should contain \"Input the task priority (C, H, N, L):\"")
      
              for (s in inputStrings) {
                  if (!co.input(s, "Input the task priority (C, H, N, L):"))
                      return CheckResult(false, "Your output should contain \"Input the task priority (C, H, N, L):\"")
              }
      
              if (!co.input("N", "Input the date (yyyy-mm-dd):"))
                  return CheckResult(false, "Your output should contain \"Input the date (yyyy-mm-dd):\"")
              if (!co.input("2022-1-1", "Input the time (hh:mm):"))
                  return CheckResult(false, "Your output should contain \"Input the time (hh:mm):\"")
              if (!co.input("0:0", "Input a new task (enter a blank line to end):"))
                  return CheckResult(false, "Your output should contain \"Input a new task (enter a blank line to end):\"")
              if (!co.input("Happy new year!\n\n", "Input an action (add, print, edit, delete, end):"))
                  return CheckResult(false, "Your output should contain \"Input an action (add, print, edit, delete, end):\"")
      
              if (!co.input("end", "Tasklist exiting!"))
                  return CheckResult(false, "Your output should contain \"Tasklist exiting!\"")
      
              if (!co.programIsFinished() )
                  return CheckResult(false, "The application didn't exit.")
              return CheckResult.correct()
          }
      
          // Wrong date is input
          @DynamicTest(order = 3)
          fun tasklistTest30(): CheckResult {
              try {
                  val jsonFile = File("tasklist.json")
                  if (jsonFile.exists()) jsonFile.delete()
              } catch (e: Exception) {
                  return CheckResult(false, "An exception was thrown, while trying to delete a JSON file.")
              }
      
              val inputStrings = listOf("2021-2-29", "2021-13-1", "2021-12-32",  "thisDay", " ")
              val co = CheckOutput()
              if ( !co.start("Input an action (add, print, edit, delete, end):") )
                  return CheckResult(false, "Your output should contain \"Input an action (add, print, edit, delete, end):\"")
      
              if (!co.input("add", "Input the task priority (C, H, N, L):"))
                  return CheckResult(false, "Your output should contain \"Input the task priority (C, H, N, L):\"")
              if (!co.input("N", "Input the date (yyyy-mm-dd):"))
                  return CheckResult(false, "Your output should contain \"Input the date (yyyy-mm-dd):\"")
      
              for (s in inputStrings) {
                  if (!co.input(s, "The input date is invalid"))
                      return CheckResult(false, "Your output should contain \"The input date is invalid\"")
                  if (!co.inputNext("Input the date (yyyy-mm-dd):"))
                      return CheckResult(false, "Your output should contain \"Input the date (yyyy-mm-dd):\"")
              }
      
              if (!co.input("2022-1-1", "Input the time (hh:mm):"))
                  return CheckResult(false, "Your output should contain \"Input the time (hh:mm):\"")
              if (!co.input("0:0", "Input a new task (enter a blank line to end):"))
                  return CheckResult(false, "Your output should contain \"Input a new task (enter a blank line to end):\"")
              if (!co.input("Happy new year!\n\n", "Input an action (add, print, edit, delete, end):"))
                  return CheckResult(false, "Your output should contain \"Input an action (add, print, edit, delete, end):\"")
      
              if (!co.input("end", "Tasklist exiting!"))
                  return CheckResult(false, "Your output should contain \"Tasklist exiting!\"")
      
              if (!co.programIsFinished() )
                  return CheckResult(false, "The application didn't exit.")
              return CheckResult.correct()
          }
      
          // Wrong time is input
          @DynamicTest(order = 4)
          fun tasklistTest31(): CheckResult {
              try {
                  val jsonFile = File("tasklist.json")
                  if (jsonFile.exists()) jsonFile.delete()
              } catch (e: Exception) {
                  return CheckResult(false, "An exception was thrown, while trying to delete a JSON file.")
              }
      
              val inputStrings = listOf("24:00", "12:60", "12.12",  "thisTime", " ")
              val co = CheckOutput()
              if ( !co.start("Input an action (add, print, edit, delete, end):") )
                  return CheckResult(false, "Your output should contain \"Input an action (add, print, edit, delete, end):\"")
      
              if (!co.input("add", "Input the task priority (C, H, N, L):"))
                  return CheckResult(false, "Your output should contain \"Input the task priority (C, H, N, L):\"")
              if (!co.input("N", "Input the date (yyyy-mm-dd):"))
                  return CheckResult(false, "Your output should contain \"Input the date (yyyy-mm-dd):\"")
              if (!co.input("2022-1-1", "Input the time (hh:mm):"))
                  return CheckResult(false, "Your output should contain \"Input the time (hh:mm):\"")
      
              for (s in inputStrings) {
                  if (!co.input(s, "The input time is invalid"))
                      return CheckResult(false, "Your output should contain \"The input time is invalid\"")
                  if (!co.inputNext("Input the time (hh:mm):"))
                      return CheckResult(false, "Your output should contain \"Input the time (hh:mm):\"")
              }
      
              if (!co.input("0:0", "Input a new task (enter a blank line to end):"))
                  return CheckResult(false, "Your output should contain \"Input a new task (enter a blank line to end):\"")
              if (!co.input("Happy new year!\n\n", "Input an action (add, print, edit, delete, end):"))
                  return CheckResult(false, "Your output should contain \"Input an action (add, print, edit, delete, end):\"")
      
              if (!co.input("end", "Tasklist exiting!"))
                  return CheckResult(false, "Your output should contain \"Tasklist exiting!\"")
      
              if (!co.programIsFinished() )
                  return CheckResult(false, "The application didn't exit.")
              return CheckResult.correct()
          }
      
          // Blank task is input
          @DynamicTest(order = 5)
          fun tasklistTest32(): CheckResult {
              try {
                  val jsonFile = File("tasklist.json")
                  if (jsonFile.exists()) jsonFile.delete()
              } catch (e: Exception) {
                  return CheckResult(false, "An exception was thrown, while trying to delete a JSON file.")
              }
      
              val co = CheckOutput()
              if ( !co.start("Input an action (add, print, edit, delete, end):") )
                  return CheckResult(false, "Your output should contain \"Input an action (add, print, edit, delete, end):\"")
      
              if (!co.input("add", "Input the task priority (C, H, N, L):"))
                  return CheckResult(false, "Your output should contain \"Input the task priority (C, H, N, L):\"")
              if (!co.input("N", "Input the date (yyyy-mm-dd):"))
                  return CheckResult(false, "Your output should contain \"Input the date (yyyy-mm-dd):\"")
              if (!co.input("2022-1-1", "Input the time (hh:mm):"))
                  return CheckResult(false, "Your output should contain \"Input the time (hh:mm):\"")
              if (!co.input("0:0", "Input a new task (enter a blank line to end):"))
                  return CheckResult(false, "Your output should contain \"Input a new task (enter a blank line to end):\"")
              if (!co.input("     ", "The task is blank"))
                  return CheckResult(false, "Your output should contain \"The task is blank\"")
              if (!co.inputNext("Input an action (add, print, edit, delete, end):"))
                  return CheckResult(false, "Your output should contain \"Input an action (add, print, edit, delete, end):\"")
      
              if (!co.input("end", "Tasklist exiting!"))
                  return CheckResult(false, "Your output should contain \"Tasklist exiting!\"")
      
              if (!co.programIsFinished() )
                  return CheckResult(false, "The application didn't exit.")
              return CheckResult.correct()
          }
      
          // No tasks have been input
          @DynamicTest(order = 6)
          fun tasklistTest33(): CheckResult {
              try {
                  val jsonFile = File("tasklist.json")
                  if (jsonFile.exists()) jsonFile.delete()
              } catch (e: Exception) {
                  return CheckResult(false, "An exception was thrown, while trying to delete a JSON file.")
              }
      
              val inputStrings = listOf("print", "edit", "delete")
              val co = CheckOutput()
              if ( !co.start("Input an action (add, print, edit, delete, end):") )
                  return CheckResult(false, "Your output should contain \"Input an action (add, print, edit, delete, end):\"")
      
              for (s in inputStrings) {
                  if (!co.input(s, "No tasks have been input"))
                      return CheckResult(false, "Your output should contain \"No tasks have been input\"")
                  if (!co.inputNext("Input an action (add, print, edit, delete, end):"))
                      return CheckResult(false, "Your output should contain \"Input an action (add, print, edit, delete, end):\""
                      )
              }
      
              if (!co.input("end", "Tasklist exiting!"))
                  return CheckResult(false, "Your output should contain \"Tasklist exiting!\"")
      
              if (!co.programIsFinished() )
                  return CheckResult(false, "The application didn't exit.")
              return CheckResult.correct()
          }
      
          // Normal task addition
          @DynamicTest(order = 7)
          fun tasklistTest34(): CheckResult {
              try {
                  val jsonFile = File("tasklist.json")
                  if (jsonFile.exists()) jsonFile.delete()
              } catch (e: Exception) {
                  return CheckResult(false, "An exception was thrown, while trying to delete a JSON file.")
              }
      
              val now = Clock.System.now()
              val currentDate = now.toLocalDateTime(TimeZone.of("UTC+2")).date
              val sameDay = currentDate.toString()
              val daysAfter = currentDate.plus(7, DateTimeUnit.DAY).toString()
              val daysBefore = currentDate.minus(7, DateTimeUnit.DAY).toString()
      
              val inputStrings = arrayListOf(
                  arrayOf("C", sameDay, "17:00", "See my dentist\n\n"),
                  arrayOf("h", daysAfter, "17:00", "Cinema: get tickets\nCheck movie reviews\n\n"),
                  arrayOf("n", daysBefore, "19:00", "Supermarket\nChocolates\nflour\noranges\n\n",),
                  arrayOf("l", daysAfter, "12:00", "Buy book\n\n")
              )
      
              val outputStrings = arrayListOf(
                  arrayOf("| 1  | $sameDay | 17:00 | \u001B[101m \u001B[0m | \u001B[103m \u001B[0m |See my dentist                              |"),
                  arrayOf("| 2  | $daysAfter | 17:00 | \u001B[103m \u001B[0m | \u001B[102m \u001B[0m |Cinema: get tickets                         |",
                      "|    |            |       |   |   |Check movie reviews                         |"),
                  arrayOf("| 3  | $daysBefore | 19:00 | \u001B[102m \u001B[0m | \u001B[101m \u001B[0m |Supermarket                                 |",
                      "|    |            |       |   |   |Chocolates                                  |",
                      "|    |            |       |   |   |flour                                       |",
                      "|    |            |       |   |   |oranges                                     |"),
                  arrayOf("| 4  | $daysAfter | 12:00 | \u001B[104m \u001B[0m | \u001B[102m \u001B[0m |Buy book                                    |")
              )
      
              val co = CheckOutput()
              if ( !co.start("Input an action (add, print, edit, delete, end):") )
                  return CheckResult(false, "Your output should contain \"Input an action (add, print, edit, delete, end):\"")
      
              for (taskInput in inputStrings) {
                  if (!co.input("add", "Input the task priority (C, H, N, L):"))
                      return CheckResult(false, "Your output should contain \"Input the task priority (C, H, N, L):\"")
                  if (!co.input(taskInput[0], "Input the date (yyyy-mm-dd):"))
                      return CheckResult(false, "Your output should contain \"Input the date (yyyy-mm-dd):\"")
                  if (!co.input(taskInput[1], "Input the time (hh:mm):"))
                      return CheckResult(false, "Your output should contain \"Input the time (hh:mm):\"")
                  if (!co.input(taskInput[2], "Input a new task (enter a blank line to end):"))
                      return CheckResult(false, "Your output should contain \"Input a new task (enter a blank line to end):\"")
                  if (!co.input(taskInput[3], "Input an action (add, print, edit, delete, end):"))
                      return CheckResult(false, "Your output should contain \"Input an action (add, print, edit, delete, end):\"")
              }
      
              co.getNextOutput("print")
              if (!co.inputNext("+----+------------+-------+---+---+--------------------------------------------+",
                      "| N  |    Date    | Time  | P | D |                   Task                     |",
                      "+----+------------+-------+---+---+--------------------------------------------+"))
                  return CheckResult(false, "Your output header isn't correct\"")
              for (s in outputStrings) {
                  if (!co.inputNext(*s)) {
                      val str = StringBuilder()
                      s.forEach { str.appendLine(it) }
                      return CheckResult(false, "Your output should contain \"${str.toString()}\"")
                  }
                  if (!co.inputNext("+----+------------+-------+---+---+--------------------------------------------+"))
                      return CheckResult(false, "Wrong dividing line." +
                              "Your output should contain \"+----+------------+-------+---+---+--------------------------------------------+\"")
              }
              if (!co.inputNext("Input an action (add, print, edit, delete, end):"))
                  return CheckResult(false, "Your output should contain \"Input an action (add, print, edit, delete, end):\"")
      
              if (!co.input("end", "Tasklist exiting!"))
                  return CheckResult(false, "Your output should contain \"Tasklist exiting!\"")
      
              if (!co.programIsFinished() )
                  return CheckResult(false, "The application didn't exit.")
              return CheckResult.correct()
          }
      
          // Tasks deletion
          @DynamicTest(order = 8)
          fun tasklistTest35(): CheckResult {
              try {
                  val jsonFile = File("tasklist.json")
                  if (jsonFile.exists()) jsonFile.delete()
              } catch (e: Exception) {
                  return CheckResult(false, "An exception was thrown, while trying to delete a JSON file.")
              }
      
              val now = Clock.System.now()
              val currentDate = now.toLocalDateTime(TimeZone.of("UTC+2")).date
              val sameDay = currentDate.toString()
              val daysAfter = currentDate.plus(7, DateTimeUnit.DAY).toString()
              val daysBefore = currentDate.minus(7, DateTimeUnit.DAY).toString()
      
              val inputStrings = arrayListOf(
                  arrayOf("N", daysAfter, "17:00", "Cinema: get tickets\n\n"),
                  arrayOf("l", daysBefore, "12:00", "Buy book\n\n")
              )
      
              val co = CheckOutput()
              if ( !co.start("Input an action (add, print, edit, delete, end):") )
                  return CheckResult(false, "Your output should contain \"Input an action (add, print, edit, delete, end):\"")
      
              for (taskInput in inputStrings) {
                  if (!co.input("add", "Input the task priority (C, H, N, L):"))
                      return CheckResult(false, "Your output should contain \"Input the task priority (C, H, N, L):\"")
                  if (!co.input(taskInput[0], "Input the date (yyyy-mm-dd):"))
                      return CheckResult(false, "Your output should contain \"Input the date (yyyy-mm-dd):\"")
                  if (!co.input(taskInput[1], "Input the time (hh:mm):"))
                      return CheckResult(false, "Your output should contain \"Input the time (hh:mm):\"")
                  if (!co.input(taskInput[2], "Input a new task (enter a blank line to end):"))
                      return CheckResult(false, "Your output should contain \"Input a new task (enter a blank line to end):\"")
                  if (!co.input(taskInput[3], "Input an action (add, print, edit, delete, end):"))
                      return CheckResult(false, "Your output should contain \"Input an action (add, print, edit, delete, end):\"")
              }
      
              co.getNextOutput("delete")
              if (!co.inputNext("+----+------------+-------+---+---+--------------------------------------------+",
                      "| N  |    Date    | Time  | P | D |                   Task                     |",
                      "+----+------------+-------+---+---+--------------------------------------------+"))
                  return CheckResult(false, "Your output header isn't correct\"")
              if (!co.inputNext("| 1  | $daysAfter | 17:00 | \u001B[102m \u001B[0m | \u001B[102m \u001B[0m |Cinema: get tickets                         |"))
                  return CheckResult(false, "Your output should contain" +
                          " \"| 1  | $daysAfter | 17:00 | \u001B[102m \u001B[0m | \u001B[102m \u001B[0m |Cinema: get tickets                         |\"")
              if (!co.inputNext("+----+------------+-------+---+---+--------------------------------------------+"))
                  return CheckResult(false, "Wrong dividing line." +
                          "Your output should contain \"+----+------------+-------+---+---+--------------------------------------------+\"")
              if (!co.inputNext("| 2  | $daysBefore | 12:00 | \u001B[104m \u001B[0m | \u001B[101m \u001B[0m |Buy book                                    |"))
                  return CheckResult(false, "Your output should contain" +
                          " \"| 2  | $daysBefore | 12:00 | \u001B[104m \u001B[0m | \u001B[101m \u001B[0m |Buy book                                    |\"")
              if (!co.inputNext("+----+------------+-------+---+---+--------------------------------------------+"))
                  return CheckResult(false, "Wrong dividing line." +
                          "Your output should contain \"+----+------------+-------+---+---+--------------------------------------------+\"")
      
              if (!co.inputNext("Input the task number (1-2):"))
                  return CheckResult(false, "Your output should contain \"Input the task number (1-2):\"")
      
              if (!co.input("1", "The task is deleted"))
                  return CheckResult(false, "Your output should contain \"The task is deleted\"")
      
              if (!co.inputNext("Input an action (add, print, edit, delete, end):"))
                  return CheckResult(false, "Your output should contain \"Input an action (add, print, edit, delete, end):\"")
      
              co.getNextOutput("delete")
              if (!co.inputNext("+----+------------+-------+---+---+--------------------------------------------+",
                      "| N  |    Date    | Time  | P | D |                   Task                     |",
                      "+----+------------+-------+---+---+--------------------------------------------+"))
                  return CheckResult(false, "Your output header isn't correct\"")
              if (!co.inputNext("| 1  | $daysBefore | 12:00 | \u001B[104m \u001B[0m | \u001B[101m \u001B[0m |Buy book                                    |"))
                  return CheckResult(false, "Your output should contain" +
                          " \"| 2  | $daysBefore | 12:00 | \u001B[104m \u001B[0m | \u001B[101m \u001B[0m |Buy book                                    |\"")
              if (!co.inputNext("+----+------------+-------+---+---+--------------------------------------------+"))
                  return CheckResult(false, "Wrong dividing line." +
                          "Your output should contain \"+----+------------+-------+---+---+--------------------------------------------+\"")
      
              if (!co.inputNext("Input the task number (1-1):"))
                  return CheckResult(false, "Your output should contain \"Input the task number (1-2):\"")
      
              if (!co.input("1", "The task is deleted"))
                  return CheckResult(false, "Your output should contain \"The task is deleted\"")
      
              if (!co.inputNext("Input an action (add, print, edit, delete, end):"))
                  return CheckResult(false, "Your output should contain \"Input an action (add, print, edit, delete, end):\"")
      
              if (!co.input("delete", "No tasks have been input"))
                  return CheckResult(false, "Your output should contain \"No tasks have been input\"")
              if (!co.inputNext("Input an action (add, print, edit, delete, end):"))
                  return CheckResult(false, "Your output should contain \"Input an action (add, print, edit, delete, end):\"")
      
              if (!co.input("print", "No tasks have been input"))
                  return CheckResult(false, "Your output should contain \"No tasks have been input\"")
              if (!co.inputNext("Input an action (add, print, edit, delete, end):"))
                  return CheckResult(false, "Your output should contain \"Input an action (add, print, edit, delete, end):\"")
      
              if (!co.input("end", "Tasklist exiting!"))
                  return CheckResult(false, "Your output should contain \"Tasklist exiting!\"")
      
              if (!co.programIsFinished() )
                  return CheckResult(false, "The application didn't exit.")
              return CheckResult.correct()
          }
      
          // Task editing
          @DynamicTest(order = 9)
          fun tasklistTest36(): CheckResult {
              try {
                  val jsonFile = File("tasklist.json")
                  if (jsonFile.exists()) jsonFile.delete()
              } catch (e: Exception) {
                  return CheckResult(false, "An exception was thrown, while trying to delete a JSON file.")
              }
      
              val co = CheckOutput()
              if ( !co.start("Input an action (add, print, edit, delete, end):") )
                  return CheckResult(false, "Your output should contain \"Input an action (add, print, edit, delete, end):\"")
      
              if (!co.input("add", "Input the task priority (C, H, N, L):"))
                  return CheckResult(false, "Your output should contain \"Input the task priority (C, H, N, L):\"")
              if (!co.input("N", "Input the date (yyyy-mm-dd):"))
                  return CheckResult(false, "Your output should contain \"Input the date (yyyy-mm-dd):\"")
              if (!co.input("2000-1-1", "Input the time (hh:mm):"))
                  return CheckResult(false, "Your output should contain \"Input the time (hh:mm):\"")
              if (!co.input("0:0", "Input a new task (enter a blank line to end):"))
                  return CheckResult(false, "Your output should contain \"Input a new task (enter a blank line to end):\"")
              if (!co.input("My task\n\n", "Input an action (add, print, edit, delete, end):"))
                  return CheckResult(false, "Your output should contain \"Input an action (add, print, edit, delete, end):\"")
      
              co.getNextOutput("edit")
              if (!co.inputNext("+----+------------+-------+---+---+--------------------------------------------+",
                      "| N  |    Date    | Time  | P | D |                   Task                     |",
                      "+----+------------+-------+---+---+--------------------------------------------+"))
                  return CheckResult(false, "Your output header isn't correct\"")
              if (!co.inputNext("| 1  | 2000-01-01 | 00:00 | \u001B[102m \u001B[0m | \u001B[101m \u001B[0m |My task                                     |"))
                  return CheckResult(false, "Your output should contain" +
                          " \"| 1  | 2000-01-01 | 00:00 | \u001B[102m \u001B[0m | \u001B[101m \u001B[0m |My task                                     |\"")
              if (!co.inputNext("+----+------------+-------+---+---+--------------------------------------------+"))
                  return CheckResult(false, "Wrong dividing line." +
                          "Your output should contain \"+----+------------+-------+---+---+--------------------------------------------+\"")
              if (!co.inputNext("Input the task number (1-1):"))
                  return CheckResult(false, "Your output should contain \"Input the task number (1-1):\"")
              if (!co.input("1", "Input a field to edit (priority, date, time, task):"))
                  return CheckResult(false, "Your output should contain \"Input a field to edit (priority, date, time, task):\"")
      
              if (!co.input("priority", "Input the task priority (C, H, N, L):"))
                  return CheckResult(false, "Your output should contain \"Input the task priority (C, H, N, L):\"")
              if (!co.input("H", "The task is changed"))
                  return CheckResult(false, "Your output should contain \"The task is changed\"")
              if (!co.inputNext("Input an action (add, print, edit, delete, end):"))
                  return CheckResult(false, "Your output should contain \"Input an action (add, print, edit, delete, end):\"")
      
              co.getNextOutput("edit")
              if (!co.inputNext("+----+------------+-------+---+---+--------------------------------------------+",
                      "| N  |    Date    | Time  | P | D |                   Task                     |",
                      "+----+------------+-------+---+---+--------------------------------------------+"))
                  return CheckResult(false, "Your output header isn't correct\"")
              if (!co.inputNext("| 1  | 2000-01-01 | 00:00 | \u001B[103m \u001B[0m | \u001B[101m \u001B[0m |My task                                     |"))
                  return CheckResult(false, "Your output should contain" +
                          " \"| 1  | 2000-01-01 | 00:00 | \u001B[102m \u001B[0m | \u001B[101m \u001B[0m |My task                                     |\"")
              if (!co.inputNext("+----+------------+-------+---+---+--------------------------------------------+"))
                  return CheckResult(false, "Wrong dividing line." +
                          "Your output should contain \"+----+------------+-------+---+---+--------------------------------------------+\"")
              if (!co.inputNext("Input the task number (1-1):"))
                  return CheckResult(false, "Your output should contain \"Input the task number (1-1):\"")
              if (!co.input("1", "Input a field to edit (priority, date, time, task):"))
                  return CheckResult(false, "Your output should contain \"Input a field to edit (priority, date, time, task):\"")
      
      
              if (!co.input("date", "Input the date (yyyy-mm-dd):"))
                  return CheckResult(false, "Your output should contain \"Input the date (yyyy-mm-dd):\"")
              if (!co.input("2001-2-2", "The task is changed"))
                  return CheckResult(false, "Your output should contain \"The task is changed\"")
              if (!co.inputNext("Input an action (add, print, edit, delete, end):"))
                  return CheckResult(false, "Your output should contain \"Input an action (add, print, edit, delete, end):\"")
      
              co.getNextOutput("edit")
              if (!co.inputNext("+----+------------+-------+---+---+--------------------------------------------+",
                      "| N  |    Date    | Time  | P | D |                   Task                     |",
                      "+----+------------+-------+---+---+--------------------------------------------+"))
                  return CheckResult(false, "Your output header isn't correct\"")
              if (!co.inputNext("| 1  | 2001-02-02 | 00:00 | \u001B[103m \u001B[0m | \u001B[101m \u001B[0m |My task                                     |"))
                  return CheckResult(false, "Your output should contain" +
                          " \"| 1  | 2001-02-02 | 00:00 | \u001B[102m \u001B[0m | \u001B[101m \u001B[0m |My task                                     |\"")
              if (!co.inputNext("+----+------------+-------+---+---+--------------------------------------------+"))
                  return CheckResult(false, "Wrong dividing line." +
                          "Your output should contain \"+----+------------+-------+---+---+--------------------------------------------+\"")
              if (!co.inputNext("Input the task number (1-1):"))
                  return CheckResult(false, "Your output should contain \"Input the task number (1-1):\"")
              if (!co.input("1", "Input a field to edit (priority, date, time, task):"))
                  return CheckResult(false, "Your output should contain \"Input a field to edit (priority, date, time, task):\"")
      
              if (!co.input("time", "Input the time (hh:mm):"))
                  return CheckResult(false, "Your output should contain \"Input the time (hh:mm):\"")
              if (!co.input("12:34", "The task is changed"))
                  return CheckResult(false, "Your output should contain \"The task is changed\"")
              if (!co.inputNext("Input an action (add, print, edit, delete, end):"))
                  return CheckResult(false, "Your output should contain \"Input an action (add, print, edit, delete, end):\"")
      
              co.getNextOutput("edit")
              if (!co.inputNext("+----+------------+-------+---+---+--------------------------------------------+",
                      "| N  |    Date    | Time  | P | D |                   Task                     |",
                      "+----+------------+-------+---+---+--------------------------------------------+"))
                  return CheckResult(false, "Your output header isn't correct\"")
              if (!co.inputNext("| 1  | 2001-02-02 | 12:34 | \u001B[103m \u001B[0m | \u001B[101m \u001B[0m |My task                                     |"))
                  return CheckResult(false, "Your output should contain" +
                          " \"| 1  | 2001-02-02 | 12:34 | \u001B[102m \u001B[0m | \u001B[101m \u001B[0m |My task                                     |\"")
              if (!co.inputNext("+----+------------+-------+---+---+--------------------------------------------+"))
                  return CheckResult(false, "Wrong dividing line." +
                          "Your output should contain \"+----+------------+-------+---+---+--------------------------------------------+\"")
              if (!co.inputNext("Input the task number (1-1):"))
                  return CheckResult(false, "Your output should contain \"Input the task number (1-1):\"")
              if (!co.input("1", "Input a field to edit (priority, date, time, task):"))
                  return CheckResult(false, "Your output should contain \"The task is deleted\nInput a field to edit (priority, date, time, task):\"")
      
              if (!co.input("task", "Input a new task (enter a blank line to end):"))
                  return CheckResult(false, "Your output should contain \"Input a new task (enter a blank line to end):\"")
              if (!co.input("My new task\n\n", "The task is changed"))
                  return CheckResult(false, "Your output should contain \"The task is changed\"")
              if (!co.inputNext("Input an action (add, print, edit, delete, end):"))
                  return CheckResult(false, "Your output should contain \"Input an action (add, print, edit, delete, end):\"")
      
              co.getNextOutput("print")
              if (!co.inputNext("+----+------------+-------+---+---+--------------------------------------------+",
                      "| N  |    Date    | Time  | P | D |                   Task                     |",
                      "+----+------------+-------+---+---+--------------------------------------------+"))
                  return CheckResult(false, "Your output header isn't correct\"")
              if (!co.inputNext("| 1  | 2001-02-02 | 12:34 | \u001B[103m \u001B[0m | \u001B[101m \u001B[0m |My new task                                 |"))
                  return CheckResult(false, "Your output should contain" +
                          " \"| 1  | 2001-02-02 | 12:34 | \u001B[102m \u001B[0m | \u001B[101m \u001B[0m |My new task                                 |\"")
              if (!co.inputNext("+----+------------+-------+---+---+--------------------------------------------+"))
                  return CheckResult(false, "Wrong dividing line." +
                          "Your output should contain \"+----+------------+-------+---+---+--------------------------------------------+\"")
      
              if (!co.inputNext("Input an action (add, print, edit, delete, end):"))
                  return CheckResult(false, "Your output should contain \"Input an action (add, print, edit, delete, end):\"")
      
              if (!co.input("end", "Tasklist exiting!"))
                  return CheckResult(false, "Your output should contain \"Tasklist exiting!\"")
              if (!co.programIsFinished() )
                  return CheckResult(false, "The application didn't exit.")
              return CheckResult.correct()
          }
      
          // Check JSON file saving
          @DynamicTest(order = 10)
          fun tasklistTest37(): CheckResult {
              try {
                  val jsonFile = File("tasklist.json")
                  if (jsonFile.exists()) jsonFile.delete()
              } catch (e: Exception) {
                  return CheckResult(false, "An exception was thrown, while trying to delete a JSON file.")
              }
      
              val now = Clock.System.now()
              val currentDate = now.toLocalDateTime(TimeZone.of("UTC+2")).date
              val sameDay = currentDate.toString()
              val daysAfter = currentDate.plus(7, DateTimeUnit.DAY).toString()
              val daysBefore = currentDate.minus(7, DateTimeUnit.DAY).toString()
      
              val inputStrings = arrayListOf(
                  arrayOf("C", sameDay, "17:00", "See my dentist\n\n"),
                  arrayOf("h", daysAfter, "17:00", "Cinema: get tickets\nCheck movie reviews\n\n"),
                  arrayOf("n", daysBefore, "19:00", "Supermarket\nChocolates\nflour\noranges\n\n",),
                  arrayOf("l", daysAfter, "12:00", "Buy book\n\n")
              )
      
              val outputStrings = arrayListOf(
                  arrayOf("| 1  | $sameDay | 17:00 | \u001B[101m \u001B[0m | \u001B[103m \u001B[0m |See my dentist                              |"),
                  arrayOf("| 2  | $daysAfter | 17:00 | \u001B[103m \u001B[0m | \u001B[102m \u001B[0m |Cinema: get tickets                         |",
                      "|    |            |       |   |   |Check movie reviews                         |"),
                  arrayOf("| 3  | $daysBefore | 19:00 | \u001B[102m \u001B[0m | \u001B[101m \u001B[0m |Supermarket                                 |",
                      "|    |            |       |   |   |Chocolates                                  |",
                      "|    |            |       |   |   |flour                                       |",
                      "|    |            |       |   |   |oranges                                     |"),
                  arrayOf("| 4  | $daysAfter | 12:00 | \u001B[104m \u001B[0m | \u001B[102m \u001B[0m |Buy book                                    |")
              )
      
              val co = CheckOutput()
              if ( !co.start("Input an action (add, print, edit, delete, end):") )
                  return CheckResult(false, "Your output should contain \"Input an action (add, print, edit, delete, end):\"")
      
              for (taskInput in inputStrings) {
                  if (!co.input("add", "Input the task priority (C, H, N, L):"))
                      return CheckResult(false, "Your output should contain \"Input the task priority (C, H, N, L):\"")
                  if (!co.input(taskInput[0], "Input the date (yyyy-mm-dd):"))
                      return CheckResult(false, "Your output should contain \"Input the date (yyyy-mm-dd):\"")
                  if (!co.input(taskInput[1], "Input the time (hh:mm):"))
                      return CheckResult(false, "Your output should contain \"Input the time (hh:mm):\"")
                  if (!co.input(taskInput[2], "Input a new task (enter a blank line to end):"))
                      return CheckResult(false, "Your output should contain \"Input a new task (enter a blank line to end):\"")
                  if (!co.input(taskInput[3], "Input an action (add, print, edit, delete, end):"))
                      return CheckResult(false, "Your output should contain \"Input an action (add, print, edit, delete, end):\"")
              }
      
              co.getNextOutput("print")
              if (!co.inputNext("+----+------------+-------+---+---+--------------------------------------------+",
                      "| N  |    Date    | Time  | P | D |                   Task                     |",
                      "+----+------------+-------+---+---+--------------------------------------------+"))
                  return CheckResult(false, "Your output header isn't correct\"")
              for (s in outputStrings) {
                  if (!co.inputNext(*s)) {
                      val str = StringBuilder()
                      s.forEach { str.appendLine(it) }
                      return CheckResult(false, "Your output should contain \"${str.toString()}\"")
                  }
                  if (!co.inputNext("+----+------------+-------+---+---+--------------------------------------------+"))
                      return CheckResult(false, "Wrong dividing line." +
                              "Your output should contain \"+----+------------+-------+---+---+--------------------------------------------+\"")
              }
              if (!co.inputNext("Input an action (add, print, edit, delete, end):"))
                  return CheckResult(false, "Your output should contain \"Input an action (add, print, edit, delete, end):\"")
      
              if (!co.input("end", "Tasklist exiting!"))
                  return CheckResult(false, "Your output should contain \"Tasklist exiting!\"")
      
              if (!co.programIsFinished() )
                  return CheckResult(false, "The application didn't exit.")
      
              try {
                  val jsonFile = File("tasklist.json")
                  if (!jsonFile.exists())
                      return CheckResult(false, "The file tasklist.json hasn't been created, after the end action.")
                  val jsonText = jsonFile.readText()
                  if (jsonText.isBlank())
                      return CheckResult(false, "The file tasklist.json is blank.")
                  val t = JsonUtils.getType(getJson(jsonText))
                  if (t != "array")
                      return CheckResult(false, "Wrong JSON format. JSON string is not an array.")
              } catch (e: Exception) {
                  return CheckResult(false, "An exception was thrown, while trying to check if a file exists.")
              }
      
              return CheckResult.correct()
          }
      
          // Check JSON file loading
          @DynamicTest(order = 11)
          fun tasklistTest38(): CheckResult {
              try {
                  val jsonFile = File("tasklist.json")
                  if (!jsonFile.exists())
                      return CheckResult(false, "The file tasklist.json doesn't exist.")
                  val jsonText = jsonFile.readText()
                  if (jsonText.isBlank())
                      return CheckResult(false, "The file tasklist.json is blank.")
                  val t = JsonUtils.getType(getJson(jsonText))
                  if (t != "array")
                      return CheckResult(false, "Wrong JSON format. JSON string is not an array.")
              } catch (e: Exception) {
                  return CheckResult(false, "An exception was thrown, while trying to check if a file exists.")
              }
      
              val now = Clock.System.now()
              val currentDate = now.toLocalDateTime(TimeZone.of("UTC+2")).date
              val sameDay = currentDate.toString()
              val daysAfter = currentDate.plus(7, DateTimeUnit.DAY).toString()
              val daysBefore = currentDate.minus(7, DateTimeUnit.DAY).toString()
      
              val outputStrings = arrayListOf(
                  arrayOf("| 1  | $sameDay | 17:00 | \u001B[101m \u001B[0m | \u001B[103m \u001B[0m |See my dentist                              |"),
                  arrayOf("| 2  | $daysAfter | 17:00 | \u001B[103m \u001B[0m | \u001B[102m \u001B[0m |Cinema: get tickets                         |",
                      "|    |            |       |   |   |Check movie reviews                         |"),
                  arrayOf("| 3  | $daysBefore | 19:00 | \u001B[102m \u001B[0m | \u001B[101m \u001B[0m |Supermarket                                 |",
                      "|    |            |       |   |   |Chocolates                                  |",
                      "|    |            |       |   |   |flour                                       |",
                      "|    |            |       |   |   |oranges                                     |"),
                  arrayOf("| 4  | $daysAfter | 12:00 | \u001B[104m \u001B[0m | \u001B[102m \u001B[0m |Buy book                                    |")
              )
      
              val co = CheckOutput()
              if ( !co.start("Input an action (add, print, edit, delete, end):") )
                  return CheckResult(false, "Your output should contain \"Input an action (add, print, edit, delete, end):\"")
      
              co.getNextOutput("print")
              if (!co.inputNext("+----+------------+-------+---+---+--------------------------------------------+",
                      "| N  |    Date    | Time  | P | D |                   Task                     |",
                      "+----+------------+-------+---+---+--------------------------------------------+"))
                  return CheckResult(false, "Your output header isn't correct\"")
              for (s in outputStrings) {
                  if (!co.inputNext(*s)) {
                      val str = StringBuilder()
                      s.forEach { str.appendLine(it) }
                      return CheckResult(false, "Your output should contain \"${str.toString()}\"")
                  }
                  if (!co.inputNext("+----+------------+-------+---+---+--------------------------------------------+"))
                      return CheckResult(false, "Wrong dividing line." +
                              "Your output should contain \"+----+------------+-------+---+---+--------------------------------------------+\"")
              }
              if (!co.inputNext("Input an action (add, print, edit, delete, end):"))
                  return CheckResult(false, "Your output should contain \"Input an action (add, print, edit, delete, end):\"")
      
              if (!co.input("end", "Tasklist exiting!"))
                  return CheckResult(false, "Your output should contain \"Tasklist exiting!\"")
      
              if (!co.programIsFinished() )
                  return CheckResult(false, "The application didn't exit.")
      
              return CheckResult.correct()
          }
      }
      
      class CheckOutput {
          private var main: TestedProgram = TestedProgram()
          var position = 0
          private var caseInsensitive = true
          private var trimOutput = true
          private val arguments= mutableListOf<String>()
          private var isStarted = false
          private var lastOutput = ""
      
          private fun checkOutput(outputString: String, vararg checkStr: String): Boolean {
              var searchPosition = position
              for (cStr in checkStr) {
                  val str = if (caseInsensitive) cStr.lowercase() else cStr
                  val findPosition = outputString.indexOf(str, searchPosition)
                  if (findPosition == -1) return false
                  if ( outputString.substring(searchPosition until findPosition).isNotBlank() ) return false
                  searchPosition = findPosition + str.length
              }
              position = searchPosition
              return true
          }
      
          fun start(vararg checkStr: String): Boolean {
              return if (!isStarted) {
                  var outputString = main.start(*arguments.toTypedArray())
                  lastOutput = outputString
                  if (trimOutput) outputString = outputString.trim()
                  if (caseInsensitive) outputString = outputString.lowercase()
                  isStarted = true
                  checkOutput(outputString, *checkStr)
              } else false
          }
      
          fun stop() {
              main.stop()
          }
      
          fun input(input: String, vararg checkStr: String): Boolean {
              if (main.isFinished) return false
              var outputString = main.execute(input)
              lastOutput = outputString
              if (trimOutput) outputString = outputString.trim()
              if (caseInsensitive) outputString = outputString.lowercase()
              position = 0
              return checkOutput(outputString, *checkStr)
          }
      
          fun inputNext(vararg checkStr: String): Boolean {
              var outputString = lastOutput
              if (trimOutput) outputString = outputString.trim()
              if (caseInsensitive) outputString = outputString.lowercase()
              return checkOutput(outputString, *checkStr)
          }
      
          fun getNextOutput(input: String): String {
              if (main.isFinished) return ""
              val outputString = main.execute(input)
              lastOutput = outputString
              position = 0
              return  outputString
          }
      
          fun getLastOutput(): String { return lastOutput }
          fun programIsFinished(): Boolean  = main.isFinished
          fun setArguments(vararg args: String) { arguments.addAll(args.toMutableList()) }
          fun setCaseSensitivity(caseInsensitive: Boolean) { this.caseInsensitive = caseInsensitive }
          fun setOutputTrim(trimOutput: Boolean) { this.trimOutput = trimOutput}
      }
    
    
    learner_created: false
  - name: src/tasklist/TaskListApplication.kt
    visible: true
    text: |
      package tasklist
      
      import tasklist.input.CommandInput
      
      class TaskListApplication(private val commandInput: CommandInput) {
      
          fun run() {
      
              val command = commandInput.read()
      
              if (!command.execute()) {
                  return
              }
      
              run()
          }
      }
    learner_created: true
  - name: src/tasklist/input/TimeInput.kt
    visible: true
    text: |
      package tasklist.input
      
      import kotlinx.datetime.LocalDateTime
      
      class TimeInput {
          fun read(): LocalDateTime {
              println("Input the time (hh:mm):")
              val str = readln()
      
              try {
                  val time = str.split(":").map { it.toInt() }
                  return LocalDateTime(
                      2022,
                      1,
                      1,
                      time[0],
                      time[1]
                  )
              } catch (e: Throwable) {
                  println("The input time is invalid")
                  return read()
              }
          }
      }
    learner_created: true
  - name: src/tasklist/input/DateInput.kt
    visible: true
    text: |
      package tasklist.input
      
      import kotlinx.datetime.LocalDate
      
      class DateInput {
          fun read(): LocalDate {
              println("Input the date (yyyy-mm-dd):")
              val str = readln()
      
      
              try {
                  val date = str.split("-").map { it.toInt() }
                  return LocalDate(
                      date[0],
                      date[1],
                      date[2]
                  )
              } catch (e: Throwable) {
                  println("The input date is invalid")
                  return read()
              }
          }
      }
    learner_created: true
  - name: src/tasklist/command/EditTaskCommand.kt
    visible: true
    text: |
      package tasklist.command
      
      import tasklist.input.*
      import tasklist.model.TaskField
      import tasklist.model.TaskRepository
      import tasklist.output.TaskListPrinter
      
      class EditTaskCommand(private val taskRepository: TaskRepository) : TaskListCommand {
          override fun execute(): Boolean {
              val tasks = taskRepository.findAll()
              if (tasks.isEmpty()) {
                  println("No tasks have been input")
                  return true
              }
      
              TaskListPrinter(tasks).print()
      
              val id = TaskNumberInput(1, tasks.size).read()
              val field = TaskFieldInput().read()
      
              val task = taskRepository.getById(id)
      
              when (field) {
                  TaskField.PRIORITY -> {
                      val priority = TaskPriorityInput().read()
                      taskRepository.update(task.withPriority(priority))
                  }
      
                  TaskField.DATE -> {
                      val date = DateInput().read()
                      taskRepository.update(task.withDeadline(task.deadline.withDate(date)))
                  }
      
                  TaskField.TIME -> {
                      val time = TimeInput().read()
                      taskRepository.update(task.withDeadline(task.deadline.withTime(time)))
                  }
      
                  TaskField.TASK -> {
                      val titles = TaskTitlesInput().read()
                      taskRepository.update(task.withTitles(titles))
                  }
              }
      
              println("The task is changed")
      
              return true
          }
      }
    learner_created: true
  - name: src/tasklist/input/TaskTitlesInput.kt
    visible: true
    text: |
      package tasklist.input
      
      class TaskTitlesInput {
      
          private val titles = mutableListOf<String>()
      
          private fun readTitles() {
              val title = readln()
              if (title.trim().isNotEmpty()) {
                  titles.add(title)
                  readTitles()
              }
          }
      
          fun read(): List<String> {
              println("Input a new task (enter a blank line to end):")
              readTitles()
              return titles
          }
      }
    learner_created: true
  - name: src/tasklist/command/AddTaskCommand.kt
    visible: true
    text: |
      package tasklist.command
      
      import tasklist.input.*
      import tasklist.model.TaskRepository
      
      class AddTaskCommand(
          private val taskRepository: TaskRepository
      ) : TaskListCommand {
      
          override fun execute(): Boolean {
              val task = TaskInput(
                  TaskPriorityInput(),
                  TaskDeadlineInput(
                      DateInput(),
                      TimeInput()
                  ),
                  TaskTitlesInput(),
                  taskRepository
              ).read()
      
              if (task != null) {
                  taskRepository.add(task)
              }
              return true
          }
      }
    learner_created: true
  - name: src/tasklist/output/TaskListPrinter.kt
    visible: true
    text: |
      package tasklist.output
      
      import tasklist.model.ConstantLengthString
      import tasklist.model.Task
      
      private const val TITLE_LENGTH = 44
      
      class TaskListPrinter(private val tasks: List<Task>) {
          fun print() {
              println("+----+------------+-------+---+---+--------------------------------------------+")
              println("| N  |    Date    | Time  | P | D |                   Task                     |")
              println("+----+------------+-------+---+---+--------------------------------------------+")
              tasks.forEach { it ->
      
                  val title = ConstantLengthString(it.title, TITLE_LENGTH)
                  println("| ${it.id}  | ${it.deadline.dateString()} | ${it.deadline.timeString()} | ${it.priority.color} | ${it.deadline.dueTagColor()} |$title|")
      
      
                  for (str in title.extra().chunked(TITLE_LENGTH)) {
                      println("|    |            |       |   |   |${ConstantLengthString(str, TITLE_LENGTH)}|")
                  }
      
      
                  it.subtasks.forEach {
                      val subtaskTitle = ConstantLengthString(it, TITLE_LENGTH)
      
                      println("|    |            |       |   |   |$subtaskTitle|")
      
                      for (str in subtaskTitle.extra().chunked(TITLE_LENGTH)) {
                          println("|    |            |       |   |   |${ConstantLengthString(str, TITLE_LENGTH)}|")
                      }
                  }
      
                  println("+----+------------+-------+---+---+--------------------------------------------+")
              }
          }
      }
    learner_created: true
  - name: src/tasklist/model/TaskPriority.kt
    visible: true
    text: |
      package tasklist.model
      
      enum class TaskPriority(
          val value: String
      ) {
          CRITICAL("C"),
          HIGH("H"),
          Normal("N"),
          LOW("L");
      
          companion object {
              fun fromValue(value: String): TaskPriority {
                  return when (value) {
                      "C" -> CRITICAL
                      "H" -> HIGH
                      "N" -> Normal
                      "L" -> LOW
                      else -> throw IllegalArgumentException()
                  }
              }
          }
      
          val color = when (this.value) {
              "C" -> "\u001B[101m \u001B[0m"
              "H" -> "\u001B[103m \u001B[0m"
              "N" -> "\u001B[102m \u001B[0m"
              "L" -> "\u001B[104m \u001B[0m"
              else -> throw IllegalArgumentException()
          }
      }
    learner_created: true
  - name: src/tasklist/command/PrintTaskCommand.kt
    visible: true
    text: |
      package tasklist.command
      
      import tasklist.model.TaskRepository
      import tasklist.output.TaskListPrinter
      
      class PrintTaskCommand(private val taskRepository: TaskRepository) : TaskListCommand {
          override fun execute(): Boolean {
              val tasks = taskRepository.findAll()
              if (tasks.isEmpty()) {
                  println("No tasks have been input")
                  return true
              }
      
              TaskListPrinter(tasks).print()
              return true
          }
      }
    learner_created: true
  - name: src/tasklist/input/TaskPriorityInput.kt
    visible: true
    text: |
      package tasklist.input
      
      import tasklist.model.TaskPriority
      
      class TaskPriorityInput {
          fun read(): TaskPriority {
              println("Input the task priority (C, H, N, L):")
              val priority = readln().uppercase()
              return try {
                  TaskPriority.fromValue(priority)
              } catch (e: IllegalArgumentException) {
                  read()
              }
          }
      }
    learner_created: true
  - name: src/tasklist/input/CommandInput.kt
    visible: true
    text: |
      package tasklist.input
      
      import tasklist.command.TaskListCommand
      
      class CommandInput(
          private val commands: Map<String, TaskListCommand>
      ) {
          fun read(): TaskListCommand {
              println("Input an action (add, print, edit, delete, end):")
              val command = readln().lowercase()
      
              if (!commands.containsKey(command)) {
                  println("The input action is invalid")
                  return read()
              }
      
              return commands[command]!!
          }
      }
    learner_created: true
  - name: src/tasklist/model/ConstantLengthString.kt
    visible: true
    text: |
      package tasklist.model
      
      data class ConstantLengthString(private val string: String, private val length: Int) {
      
          fun extra(): String {
              val size = string.length - length
      
              return if (size > 0) string.takeLast(size) else ""
          }
      
          override fun toString(): String {
              if (string.length > length) {
                  return string.take(length)
              }
              return string + " ".repeat(length - string.length)
          }
      }
    learner_created: true
  - name: src/tasklist/command/TaskListCommand.kt
    visible: true
    text: |
      package tasklist.command
      
      interface TaskListCommand {
          fun execute(): Boolean
      }
    learner_created: true
  - name: src/tasklist/input/TaskFieldInput.kt
    visible: true
    text: |
      package tasklist.input
      
      import tasklist.model.TaskField
      
      class TaskFieldInput {
      
          fun read(): TaskField {
              println("Input a field to edit (priority, date, time, task):")
              val field = readln().lowercase()
              return try {
                  TaskField.fromValue(field)
              } catch (e: IllegalArgumentException) {
                  println("Invalid field")
                  read()
              }
          }
      }
    learner_created: true
  - name: src/tasklist/model/Task.kt
    visible: true
    text: |
      package tasklist.model
      
      class Task(
          val id: Int,
          val title: String,
          val priority: TaskPriority,
          val deadline: TaskDeadline,
          val subtasks: List<String>
      ) {
      
          fun withPriority(priority: TaskPriority): Task {
              return Task(id, title, priority, deadline, subtasks)
          }
      
          fun withDeadline(deadline: TaskDeadline): Task {
              return Task(id, title, priority, deadline, subtasks)
          }
      
          fun withTitles(titles: List<String>): Task {
              return Task(id, titles.first(), priority, deadline, titles.takeLast(titles.size - 1))
          }
      
          fun withId(id: Int): Task {
              return Task(id, title, priority, deadline, subtasks)
          }
      
          constructor(id: Int, titles: List<String>, priority: TaskPriority, deadline: TaskDeadline) : this(
              id,
              titles.first(),
              priority,
              deadline,
              titles.takeLast(titles.size - 1)
          )
      
      }
    learner_created: true
  - name: src/tasklist/model/TaskDeadline.kt
    visible: true
    text: |
      package tasklist.model
      
      import kotlinx.datetime.*
      
      data class TaskDeadline(
          val dateTime: LocalDateTime,
      ) {
          fun overdueStatus(): String {
              val currentDate = Clock.System.now().toLocalDateTime(TimeZone.of("UTC+0")).date
              val numberOfDays = currentDate.daysUntil(dateTime.date)
              return when {
                  numberOfDays == 0 -> "T"
                  numberOfDays > 0 -> "I"
                  else -> "O"
              }
          }
      
          fun dueTagColor(): String {
              return when (overdueStatus()) {
                  "T" -> "\u001B[103m \u001B[0m"
                  "I" -> "\u001B[102m \u001B[0m"
                  "O" -> "\u001B[101m \u001B[0m"
                  else -> throw IllegalArgumentException()
              }
          }
          override fun toString(): String {
              val month = dateTime.monthNumber.toString().padStart(2, '0')
              val day = dateTime.dayOfMonth.toString().padStart(2, '0')
              val hour = dateTime.hour.toString().padStart(2, '0')
              val minute = dateTime.minute.toString().padStart(2, '0')
      
              return "${dateTime.year}-$month-$day $hour:$minute"
          }
      
          fun dateString(): String {
              val month = dateTime.monthNumber.toString().padStart(2, '0')
              val day = dateTime.dayOfMonth.toString().padStart(2, '0')
              return "${dateTime.year}-$month-$day"
          }
      
          fun timeString(): String {
              val hour = dateTime.hour.toString().padStart(2, '0')
              val minute = dateTime.minute.toString().padStart(2, '0')
              return "$hour:$minute"
          }
      
          fun withDate(date: LocalDate): TaskDeadline {
              return TaskDeadline(
                  LocalDateTime(
                      date.year,
                      date.monthNumber,
                      date.dayOfMonth,
                      dateTime.hour,
                      dateTime.minute
                  )
              )
          }
      
          fun withTime(time: LocalDateTime): TaskDeadline {
              return TaskDeadline(
                  LocalDateTime(
                      dateTime.year,
                      dateTime.monthNumber,
                      dateTime.dayOfMonth,
                      time.hour,
                      time.minute
                  )
              )
          }
      }
    learner_created: true
  - name: src/tasklist/input/TaskInput.kt
    visible: true
    text: |
      package tasklist.input
      
      import tasklist.model.Task
      import tasklist.model.TaskRepository
      
      class TaskInput(
          private val priorityInput: TaskPriorityInput,
          private val deadlineInput: TaskDeadlineInput,
          private val titlesInput: TaskTitlesInput,
          private val taskRepository: TaskRepository
      ) {
      
      
          fun read(): Task? {
      
              val priority = priorityInput.read()
              val deadline = deadlineInput.read()
              val titles = titlesInput.read()
      
              if (titles.isEmpty()) {
                  println("The task is blank")
                  return null
              }
      
              return Task(
                  taskRepository.nextId(),
                  titles,
                  priority,
                  deadline
              )
          }
      }
    learner_created: true
  - name: src/tasklist/command/TaskListExitingCommand.kt
    visible: true
    text: |
      package tasklist.command
      
      class TaskListExitingCommand : TaskListCommand {
          override fun execute(): Boolean {
              println("Tasklist exiting!")
              return false
          }
      }
    learner_created: true
  - name: src/tasklist/command/DeleteCommand.kt
    visible: true
    text: |
      package tasklist.command
      
      import tasklist.input.TaskNumberInput
      import tasklist.model.TaskRepository
      import tasklist.output.TaskListPrinter
      
      class DeleteCommand(private val taskRepository: TaskRepository) : TaskListCommand {
          override fun execute(): Boolean {
              val tasks = taskRepository.findAll()
      
              if (tasks.isEmpty()) {
                  println("No tasks have been input")
                  return true
              }
      
              TaskListPrinter(tasks).print()
      
              val id = TaskNumberInput(1, tasks.size).read()
      
              taskRepository.delete(taskRepository.getById(id))
      
              println("The task is deleted")
      
              return true
          }
      }
    learner_created: true
  - name: src/tasklist/input/TaskDeadlineInput.kt
    visible: true
    text: |
      package tasklist.input
      
      import kotlinx.datetime.LocalDateTime
      import tasklist.model.TaskDeadline
      
      class TaskDeadlineInput(
          private val dateInput: DateInput,
          private val timeInput: TimeInput
      ) {
      
      
          fun read(): TaskDeadline {
      
              val date = dateInput.read()
              val time = timeInput.read()
      
              return TaskDeadline(
                  LocalDateTime(
                      date.year,
                      date.monthNumber,
                      date.dayOfMonth,
                      time.hour,
                      time.minute
                  )
              )
          }
      }
    learner_created: true
  - name: src/tasklist/model/TaskRepository.kt
    visible: true
    text: |
      package tasklist.model
      
      class TaskRepository {
      
          private var tasks = mutableListOf<Task>()
      
          private var nextId = 1
      
          fun getById(id: Int): Task {
              return tasks.find { it.id == id }!!
          }
      
          fun nextId(): Int {
              return nextId++
          }
      
          fun add(task: Task) {
              tasks.add(task)
          }
      
          fun delete(task: Task) {
              tasks.remove(task)
              refreshIds()
          }
      
          private fun refreshIds() {
              tasks = tasks.mapIndexed { index, task -> task.withId(index + 1) }.toMutableList()
          }
      
          fun update(task: Task) {
              val index = tasks.indexOfFirst { it.id == task.id }
              if (index != -1) {
                  tasks[index] = task
              }
          }
      
          fun findAll(): List<Task> {
              return tasks.toList()
          }
      }
    learner_created: true
  - name: src/tasklist/input/TaskNumberInput.kt
    visible: true
    text: |
      package tasklist.input
      
      class TaskNumberInput(private val min: Int, private val max: Int) {
          fun read(): Int {
              println("Input the task number ($min-$max):")
              val number = readln().toIntOrNull()
              return if (number != null && number in min..max) {
                  number
              } else {
                  println("Invalid task number")
                  read()
              }
          }
      }
    learner_created: true
  - name: src/tasklist/model/TaskField.kt
    visible: true
    text: |
      package tasklist.model
      
      enum class TaskField(
          val value: String
      ) {
          DATE("date"),
          TIME("time"),
          PRIORITY("priority"),
          TASK("task");
      
          companion object {
              fun fromValue(value: String): TaskField {
                  return when (value) {
                      "date" -> DATE
                      "time" -> TIME
                      "priority" -> PRIORITY
                      "task" -> TASK
                      else -> throw IllegalArgumentException()
                  }
              }
          }
      }
    learner_created: true
  - name: src/tasklist/model/JsonTaskStorage.kt
    visible: true
    learner_created: true
  - name: src/tasklist/model/TaskDto.kt
    visible: true
    learner_created: true
  - name: src/tasklist/model/TaskDeadlineDto.kt
    visible: true
    learner_created: true
  - name: tasklist.json
    visible: true
    learner_created: true
feedback_link: https://hyperskill.org/learn/step/18599#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">Hyperskill</a>
    to continue learning.
  time: "Tue, 19 Mar 2024 07:47:37 UTC"
record: -1
